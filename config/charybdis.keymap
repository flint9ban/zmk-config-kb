#include <behaviors/mouse_keys.dtsi>
#include "helper.h"
#include "greek.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&sl {
    release-after-ms = <60000>;
};

/ {
   macros {
        tmk: tmk{
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&to 1 &mkp LCLK>
                ;
        };
    };
    combos {
        compatible = "zmk,combos";

        bracket {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <6 7>;
            layers = <0 1>;
        };

        bracket_r {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 7>;
            layers = <0 1>;
        };

        lb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 9>;
            layers = <0 1>;
        };

        rb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <10 9>;
            layers = <0 1>;
        };

        lf {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <7 9>;
            layers = <0 1>;
        };

        rba {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 10>;
            layers = <0 1>;
        };


        caret {
            bindings = <&kp CARET>;
            key-positions = <2 1>;
            layers = <0 1>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <16 17>;
            layers = <0 1>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <26 27>;
            layers = <0 1>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <2 4>;
            layers = <0 1>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 15>;
            layers = <0 1>;
        };

        tick {
            bindings = <&kp GRAVE>;
            key-positions = <34 35>;
            layers = <0 1>;
        };

        scroll_right {
            bindings = <&msc SCRL_RIGHT>;
            key-positions = <3 14>;
            layers = <0 1>;
        };

        scroll_up {
            bindings = <&msc SCRL_UP>;
            key-positions = <3 16>;
            layers = <0 1>;
        };
        scroll_left {
            bindings = <&msc SCRL_LEFT>;
            key-positions = <3 13 14>;
            layers = <0 1>;
        };

        scroll_down {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <2 3 16>;
            layers = <0 1>;
        };

        dollar {
            bindings = <&kp DLLR>;
            key-positions = <4 5>;
            layers = <0 1>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <30 31>;
            layers = <0 1>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <31 33>;
            layers = <0 1>;
        };

        exam {
            bindings = <&kp EXCL>;
            key-positions = <25 26>;
            layers = <0 1>;
        };

        bslh {
            bindings = <&kp BSLH>;
            key-positions = <26 28>;
            layers = <0 1>;
        };
 
        sqt {
            bindings = <&kp SQT>;
            key-positions = <27 28>;
            layers = <0 1>;
        };

        dqt {
            bindings = <&kp DQT>;
            key-positions = <28 29>;
            layers = <0 1>;
        };

        left {
            bindings = <&kp LEFT>;
            key-positions = <31 20>;
            layers = <0 1>;
        };

        right {
            bindings = <&kp RIGHT>;
            key-positions = <33 20>;
            layers = <0 1>;
        };

        up {
            bindings = <&kp UP>;
            key-positions = <8 19>;
            layers = <0 1>;
        };

        down {
            bindings = <&kp DOWN>;
            key-positions = <32 19>;
            layers = <0 1>;
        };

        lclk {
            bindings = <&mkp LCLK>;
            key-positions = <31 32>;
            layers = <0 1>;
        };

        rclk {
            bindings = <&mkp RCLK>;
            key-positions = <33 32>;
            layers = <0 1>;
        };

        scorll {
            bindings = <&sl 2>;
            key-positions = <31 33 32>;
            layers = <0 1>;
        };

       scorll_back {
            bindings = <&to 0>;
            key-positions = <31 33 32>;
            layers = <2>;
        };

        switch {
            bindings = <&mo 6>;
            key-positions = <39 40>;
        };
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homewrow_mods_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 9 8 10 11 23 22 35 34 33 21 20 19 18 30 31 32 41 40 39>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
        };
        td: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&msc>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default-dh {
            bindings = <
&kp TAB           &kp Q            &kp W            &kp E         &td R SCRL_UP  &kp T   &kp Y        &kp U                 &kp I                 &kp O             &kp P        &kp BACKSLASH
&mt RCTRL ESCAPE  &hml LCTRL A  &hml LEFT_GUI S  &hml LEFT_ALT D  &hml LEFT_SHIFT F  &kp G        &kp H        &hmr RIGHT_SHIFT J    &hmr RIGHT_ALT K  &hmr RGUI L  &hmr RIGHT_CONTROL SEMI  &kp APOS
&kp LSHFT         &lt 1 Z            &kp X            &kp C         &lt 1 V              &kp B        &kp N        &kp M                 &kp COMMA             &kp DOT           &lt 1 FSLH     &sl 6
                                                    &lt 5 TAB     &lt 4 ENTER        &lt 1 ESCAPE    &lt 3 SPACE  &lt 7 BACKSPACE
            >;
        };
        Mouse {
            bindings = <
&trans  &trans  &trans    &trans    &trans     &trans    &trans  &trans     &kp UP   &trans     &tog 1  &trans
&trans  &msc SCRL_RIGHT  &msc SCRL_LEFT    &msc SCRL_DOWN    &trans     &trans    &trans  &kp LEFT   &kp DOWN &kp RIGHT &trans  &trans
&trans  &trans  &mo 2     &msc SCRL_UP    &trans   &mkp MB5  &mkp MB5 &mkp MB4  &sl 2 &mo 2  &trans   &trans
                          &mkp LCLK &mkp RCLK &mkp MB3   &mkp RCLK  &mkp LCLK
            >;
        };


        scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &to 0  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &tmk    &to 1    &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &mkp MB3
            >;

            label = "scroll";
        };

        default-dh_without_hrm {
            bindings = <
&kp TAB  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P  &kp BSPC
&trans   &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K      &kp L    &kp SEMI     &kp APOS
&trans   &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &tog 1 &trans
                       &trans   &trans  &trans    &trans  &kp BACKSPACE
            >;
        };

        number {
            bindings = <
&trans  &kp AT &kp HASH &kp LG(V)        &kp LG(C)          &trans    &kp KP_MULTIPLY     &kp N4  &kp N5  &kp N6  &kp PLUS &none
&trans  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_SHIFT  &trans    &kp PERCENT      &kp N1  &kp N2  &kp N3  &kp MINUS &trans
&none   &trans     &trans        &trans        &trans          &trans    &kp N0              &kp N7  &kp N8  &kp N9  &kp DOT  &trans
                                 &trans   &trans   &trans      &kp SPACE       &kp BACKSPACE
            >;
        };

        fun {
            bindings = <
&none  &kp F12  &kp F7  &kp F8  &kp F9  &mkp LCLK    &none   &kp LA(N4)  &kp LA(N5)   &kp LA(N6) &kp RIGHT_BRACE &none
&none  &hml LCTRL F11  &hml LEFT_GUI F4  &hml LEFT_ALT F5  &hml LEFT_SHIFT F6  &kp CLCK     &none  &kp LA(N1)  &kp LA(N2)   &kp LA(N3)  &kp LCTRL  &none
&none  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &none  &kp LEFT &kp UP      &kp RIGHT    &kp DOWN     &none
                        &trans   &trans   &trans           &trans  &trans
            >;
            label = "scroll";
        };

        switch {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans       &trans  &trans
&trans      &trans        &bootloader   &to 6         &trans        &trans          &trans  &trans  &trans  &bootloader  &trans  &trans
&trans      &trans        &to 0         &to 4         &to 5         &trans          &trans  &trans  &trans  &trans       &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans
            >;

            label = "switch";
        };
        direction {
            bindings = <
&trans      &trans       &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans       &trans  &trans
&trans      &trans        &trans        &trans         &trans       &trans          &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS &kp UP    &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET &trans
&trans      &trans        &trans        &trans         &trans       &trans          &kp LEFT_BRACE  &kp LEFT &kp DOWN &kp RIGHT &kp RIGHT_BRACE &trans
                                        &trans        &trans        &trans          &trans  &trans
            >;

        };
    };
};
